#+TITLE: Icemacs Configuration
#+Author: Kenzo44
#+Description: My icemacs configuration!
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

#+begin_src emacs-lisp
;;; init.el --- Kenzo's Emacs setup.  -*- lexical-binding: t; -*-
(setq before-init-time (current-time))
#+end_src

* Auto-tangle Configuration file

#+begin_src emacs-lisp
  (defun my/auto-tangle-emacs-config ()
      "Auto-tangle Emacs configuration upon saving."
      (when (equal (file-name-directory (buffer-file-name))
		   (expand-file-name user-emacs-directory))
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/auto-tangle-emacs-config nil 'make-it-local)))
#+end_src


* Package Management

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))

  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (add-to-list 'load-path "~/.emacs.d/lisp")

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+end_src


* Theme

** Doom

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 135)

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-moonlight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 30)     ;; Sets modeline height
    (doom-modeline-bar-width 5)   ;; Sets right bar width
    (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
    (setq doom-modeline-icon t)
    (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name

  (use-package nyan-mode
    :ensure t
    :config
    (setq nyan-wavy-trail t)
    (nyan-mode))
#+end_src

** Nerd Icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    :if (display-graphic-p))

  (use-package nerd-icons-dired
    :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src


* Better Defaults

#+begin_src emacs-lisp
;; Add unique buffer names in the minibuffer where there are many
;; identical files. This is super useful if you rely on folders for
;; organization and have lots of files with the same name,
;; e.g. foo/index.ts and bar/index.ts.
(require 'uniquify)

;; Automatically insert closing parens
(electric-pair-mode t)

;; Efficiency Changes
(setq auto-revert-avoid-polling t
      auto-revert-check-vc-info t
      global-auto-revert-non-file-buffers t)

;; Enable global-auto-revert-mode
(global-auto-revert-mode t)
#+end_src


* File Management

** Custom File Management

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "var/custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) ; Donâ€™t forget to load it, we still need it
    (load custom-file))
#+end_src

** Efficient Backup System

#+begin_src emacs-lisp
  (setq version-control t     ;; Use version numbers for backups.
	kept-new-versions 10  ;; Number of newest versions to keep.
	kept-old-versions 0   ;; Number of oldest versions to keep.
	delete-old-versions t ;; Don't ask to delete excess backup versions.
	backup-by-copying t)  ;; Copy all files, don't rename them.
  (setq vc-make-backup-files t)

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
	    (kept-new-versions 3))
	(backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer) 
#+end_src

** No litter

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :demand t)  
#+end_src

* Packages

** Diminish

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-set-init-info t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Welcome to icemacs!")
    (setq dashboard-startup-banner "~/.emacs.d/assets/iceman.png")
    (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
	  `(;; line1
	    ((,nil
	      "Bwoah"
	      "It's lights out and away we go!"
	      (lambda (&rest _) (find-file "~/.emacs.d/bwoah.org"))
	      )))
	  )
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :custom
    (which-key-side-window-location 'bottom)
    (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
    (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
    (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
    (which-key-max-description-length 25))
#+end_src

** Org Mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode) ;; Indent text
  
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))

  (with-eval-after-load 'org
    (require 'org-tempo))
#+end_src

* Performance Measures

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Icemacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract (current-time) before-init-time)))
		       gcs-done)))
#+end_src
