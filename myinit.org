#+STARTIP: overview

* Garbage Collection

#+begin_src emacs-lisp

;; -*- lexical-binding: t; -*-
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Custom file garbage
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

#+end_src

* Package Management

#+begin_src emacs-lisp

(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

#+end_src

* UI Tweaks

#+begin_src emacs-lisp
(setq frame-title-format '(buffer-file-name "Autobots, roll out! - %f" ("%b")))
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10) ;Breathing room
(menu-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq visible-bell nil)
(display-time-mode t)
(set-default-coding-systems 'utf-8)
(setq-default default-directory "~/")
(setenv "BROWSER" "firefox")t

(column-number-mode)
(global-display-line-numbers-mode t)

#+end_src

* Theme

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(97 . 97))
(add-to-list 'default-frame-alist '(alpha . (97 . 97)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-moonlight t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1))

#+end_src

** Font

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height 190)

#+end_src

* Quality of Life

#+begin_src emacs-lisp

;; ESCAPAYE
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Comment regions
(global-set-key (kbd "C-/") 'comment-or-uncomment-region)

;; Wrap lines
(global-visual-line-mode t)

;; Overwrite when pasting
(delete-selection-mode 1)

;; Smart paren and quotes
(use-package paren
  :straight nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))

(use-package elec-pair
  :straight nil
  :hook (prog-mode . electric-pair-mode))

;; Always ask for y/n keypress instead of typing out 'yes' or 'no'
(defalias 'yes-or-no-p 'y-or-n-p)

;; Scrolling
(use-package mwheel
  :straight nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
		mouse-wheel-progressive-speed nil))

;; Clean whitespace on save
(use-package whitespace
  :straight nil
  :hook (before-save . whitespace-cleanup))

;; Highlights cursor position
(use-package beacon
  :straight t
  :config
  (beacon-mode 1))

#+end_src

* Helper Functions

** Open File in SUDO
#+begin_src emacs-lisp

(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

#+end_src

* Packages

** Dashboard

#+begin_src emacs-lisp

(use-package dashboard
  :straight t
  :init
  (setq dashboard-set-init-info t)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Welcome to icemacs!")
  (setq dashboard-startup-banner "~/.emacs.d/assets/iceman.png")
  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
      `(;; line1
	((,nil
	"Bwoah"
	"It's lights out and away we go!"
	(lambda (&rest _) (find-file "~/.emacs.d/myinit.org"))
	)))
	)
  :config
  (dashboard-setup-startup-hook))

#+end_src


** Searching/Sorting/File Management using Vertico

*** Vertico & Marginalia
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :bind (:map vertico-map
	 ("C-j" . vertico-next)
	 ("C-k" . vertico-previous)
	 ("C-f" . vertico-exit)
	 :map minibuffer-local-map
	 ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

;; Saves search history for counsel
(use-package savehist
  :init
  (savehist-mode))

;; Describes each smex function
(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

;; Can't live without this
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
  (setq completion-styles '(orderless)
	completion-category-defaults nil
	completion-category-overrides '((file (styles partial-completion)))))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

#+end_src

*** Embark

#+begin_src emacs-lisp

;; In short enables a right click
(use-package embark
  :straight t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))
;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

*** Consult
#+begin_src emacs-lisp

(defun dw/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package consult
  :straight t
  :demand t
  :bind (("C-s" . consult-line)
	 ("C-M-l" . consult-imenu)
	 ("C-M-j" . persp-switch-to-buffer*)
	 :map minibuffer-local-map
	 ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'dw/get-project-root)
  (completion-in-region-function #'consult-completion-in-region))

#+end_src

*** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :config
  (setq projectile-sort-order 'recentf)
  (setq projectile-indexing-method 'hybrid)
  (setq projectile-completion-system 'ivy)
  (setq projectile-mode-line-prefix " ")
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") #'projectile-command-map)
  (define-key projectile-mode-map (kbd "s-p") #'projectile-find-file)
  (define-key projectile-mode-map (kbd "C-p") #'projectile-find-file)
  (define-key projectile-mode-map (kbd "s-F") #'projectile-ripgrep)
  (define-key projectile-mode-map (kbd "C-S-f") #'projectile-ripgrep))

#+end_src


** Window Management

#+begin_src emacs-lisp

(use-package "window"
  :straight nil
  :preface
  (defun kenzo/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun kenzo/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (setq split-width-threshold 100)
  (global-set-key (kbd "C-x 2") #'kenzo/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'kenzo/split-and-follow-vertically))

(use-package switch-window
  :straight t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	'("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))

#+end_src


** Which Key

#+begin_src emacs-lisp

(use-package which-key
  :straight t
  :config
  (which-key-mode))

#+end_src


** Company

#+begin_src emacs-lisp

(use-package company
  :straight t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

(use-package company-prescient
  :after (prescient company)
  :config
  (company-prescient-mode +1))

#+end_src


** Flycheck

#+begin_src emacs-lisp

(use-package flycheck
  :straight t
  :init
  (global-flycheck-mode t))

#+end_src


** Utilities
*** Aggressive Indent

#+begin_src emacs-lisp

(use-package aggressive-indent
  :straight t
  :config
  )

#+end_src


** Fun
*** Nyan Mode

#+begin_src emacs-lisp

(use-package nyan-mode
  :straight t
  :config
  (setq nyan-wavy-trail 1)
  (nyan-mode))

#+end_src

*** Doom Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1))

#+end_src

* Programming
** Syntax highlighting
#+begin_src emacs-lisp

(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))

(use-package rainbow-mode
  :straight t
  :init
  (add-hook 'prog-mode-hook 'rainbow-mode))

#+end_src

** Yasnippet
#+begin_src emacs-lisp

(use-package yasnippet
  :straight t
  :config
  (use-package yasnippet-snippets
  :straight t)
  (yas-reload-all))

(yas-global-mode 1)
(add-hook 'yas-minor-mode-hook (lambda ()
(yas-activate-extra-mode 'fundamental-mode)))

#+end_src
