#+STARTIP: overview

* Garbage Collection

#+begin_src emacs-lisp

;; -*- lexical-binding: t; -*-
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Custom file garbage
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

#+end_src

* Package Management

#+begin_src emacs-lisp

(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

#+end_src

* UI Tweaks

#+begin_src emacs-lisp
(setq frame-title-format '(buffer-file-name "Autobots, roll out! - %f" ("%b")))
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10) ;Breathing room
(menu-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq visible-bell nil)
(display-time-mode t)
(set-default-coding-systems 'utf-8)
(setq-default default-directory "~/")
(setenv "BROWSER" "firefox")t

(column-number-mode)
(global-display-line-numbers-mode t)

#+end_src

* Theme

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(97 . 97))
(add-to-list 'default-frame-alist '(alpha . (97 . 97)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1))

#+end_src

** Font

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height 190)

#+end_src

* Quality of Life

#+begin_src emacs-lisp

;; ESCAPAYE
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Overwrite when pasting
(delete-selection-mode 1)

(show-paren-mode t)
;; Always ask for y/n keypress instead of typing out 'yes' or 'no'
(defalias 'yes-or-no-p 'y-or-n-p)

;; Improve Scrolling
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

* Helper Functions

** Open File in SUDO
#+begin_src emacs-lisp

(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

#+end_src

* Packages

** Dashboard

#+begin_src emacs-lisp

(use-package dashboard
  :straight t
  :init
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "icemacs: BWOAH")
  (setq dashboard-startup-banner 'logo)
  :config
  (dashboard-setup-startup-hook))

#+end_src

** Window Management

#+begin_src emacs-lisp

(use-package "window"
  :straight nil
  :preface
  (defun kenzo/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun kenzo/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (setq split-width-threshold 100)
  (global-set-key (kbd "C-x 2") #'kenzo/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'kenzo/split-and-follow-vertically))

(use-package switch-window
  :straight t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))

#+end_src

** Which Key

#+begin_src emacs-lisp

(use-package which-key
  :straight t
  :config
  (which-key-mode))

#+end_src

** Company

#+begin_src emacs-lisp

(use-package company
  :straight t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

#+end_src

** Flycheck

#+begin_src emacs-lisp

(use-package flycheck
  :straight t
  :init
  (global-flycheck-mode t))

#+end_src


** Utilities
*** Aggressive Indent

#+begin_src emacs-lisp

(use-package aggressive-indent
  :straight t
  :config
  )

#+end_src


** Fun
*** Nyan Mode

#+begin_src emacs-lisp

(use-package nyan-mode
  :straight t
  :config
  (setq nyan-wavy-trail 1)
  (nyan-mode))

#+end_src

*** Doom Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1))

#+end_src
